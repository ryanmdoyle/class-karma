datasource DS {
  // optionally set multiple providers
  // example: provider = ["sqlite", "postgresql"]
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

// Define your own datamodels here and run `yarn redwood db save` to create
// migrations for them.
// TODO: Please remove the following example:

model User {
  id              String            @id @default(uuid())
  firstName       String
  lastName        String
  email           String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now())
  roles           UserRole[]
  Feedback        Feedback[]
  Redeemed        Redeemed[]
  ClassEnrollment ClassEnrollment[]
  GroupEnrollment GroupEnrollment[]
  StudentClass    StudentClass[]
  StudentGroup    StudentGroup[]
}

model UserRole {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  name      String
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Feedback {
  id        String   @id @default(uuid())
  type      String
  createdAt DateTime
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Behavior {
  id    String @id @default(uuid())
  name  String
  value Int
}

model Redeemed {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  reward    Reward   @relation(fields: [rewardId], references: [id])
  rewardId  String
  createdAt DateTime @default(now())
}

model Reward {
  id       String     @id @default(uuid())
  name     String
  cost     Int
  Redeemed Redeemed[]
}

// Check below for working in scaffolds

model StudentClass {
  id              String            @id @default(uuid())
  name            String
  owner           User              @relation(fields: [ownerId], references: [id])
  ownerId         String
  ClassEnrollment ClassEnrollment[]
}

model StudentGroup {
  id              String            @id @default(uuid())
  name            String
  owner           User              @relation(fields: [ownerId], references: [id])
  ownerId         String
  GroupEnrollment GroupEnrollment[]
}

model ClassEnrollment {
  id             String       @id @default(uuid())
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  studentClass   StudentClass @relation(fields: [studentClassId], references: [id])
  studentClassId String
}

model GroupEnrollment {
  id             String       @id @default(uuid())
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  studentGroup   StudentGroup @relation(fields: [studentGroupId], references: [id])
  studentGroupId String
}
