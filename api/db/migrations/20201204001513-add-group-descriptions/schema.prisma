datasource DS {
  // optionally set multiple providers
  // example: provider = ["sqlite", "postgresql"]
  provider = "sqlite"
  url = "***"
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

// Define your own datamodels here and run `yarn redwood db save` to create
// migrations for them.
// TODO: Please remove the following example:

model User {
  id              String                @id @default(uuid())
  uid             String                @unique
  firstName       String
  lastName        String
  email           String                @unique
  profileImage    String?
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @default(now())
  roles           UserRole[]
  Feedback        Feedback[]
  Redeemed        Redeemed[]
  ClassEnrollment PrimaryEnrollment[]
  GroupEnrollment SecondaryEnrollment[]
  PrimaryGroup    PrimaryGroup[]
  SecondaryGroup  SecondaryGroup[]
}

model UserRole {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  name      String
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Feedback {
  id        String   @id @default(uuid())
  type      String
  createdAt DateTime
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Behavior {
  id    String @id @default(uuid())
  name  String
  value Int
}

model Redeemed {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  reward    Reward   @relation(fields: [rewardId], references: [id])
  rewardId  String
  createdAt DateTime @default(now())
}

model Reward {
  id       String     @id @default(uuid())
  name     String
  cost     Int
  Redeemed Redeemed[]
}

// Check below for working in scaffolds

model PrimaryGroup {
  id                String              @id @default(uuid())
  name              String
  description       String              @default("")
  owner             User                @relation(fields: [ownerId], references: [id])
  ownerId           String
  PrimaryEnrollment PrimaryEnrollment[]
}

model SecondaryGroup {
  id                  String                @id @default(uuid())
  name                String
  description         String                @default("")
  owner               User                  @relation(fields: [ownerId], references: [id])
  ownerId             String
  SecondaryEnrollment SecondaryEnrollment[]
}

model PrimaryEnrollment {
  id             String       @id @default(uuid())
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  primaryGroup   PrimaryGroup @relation(fields: [primaryGroupId], references: [id])
  primaryGroupId String
}

model SecondaryEnrollment {
  id               String         @id @default(uuid())
  user             User           @relation(fields: [userId], references: [id])
  userId           String
  secondaryGroup   SecondaryGroup @relation(fields: [secondaryGroupId], references: [id])
  secondaryGroupId String
}
